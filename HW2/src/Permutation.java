/* Name: Dustin Vose
 * CSC3410 - Fall 2012
 * DateDue: September 22, 6AM
 * Assignment: Assignment 2
 * File:  	Permutation.java
 * 
 * Purpose: 
 * 			Generates the permutations of a string given by the user.
 * 			Creates an instance of the Permuter class which uses recursion to generate the 
 * 				permutations of the string given.
 * 			Once the permutations are created, they are stored in an ArrayList of strings and outputs 
 * 				the elements of the ArrayLists to the console as well as a text file named "Permutations.txt". 
 * 			After the program outputs the permutations, the user is prompted to answer if they want to generate
 * 				a permutation of another string. Any answer besides "yes" or "y" will end the program.
 * 
 * Solution, algorithms and data structures:   
 *          Scanners are used to receive String input from the console in the getInput method. 
 *          ArrayLists are used to store the permutations in an organized manner. 
 *          Logic was laid out to make sure that the user did not cause a possible StackOverFlow Exception by
 *          	restricting the maximum length of the string input to the final integer MAXLENGTH. 
 * 			
 *          
 * Major classes: 
 * 			Permutation - Main Class; holds an instance of the Permuter Class.
 * 			Permuter - holds no instances of other classes.   
 * 
 * Use, I/O expected:
 *			Input(s): String input from the console that will be used to generate the permutations,
 * 						this string will be restricted in length by the MAXLENGTH integer;
 * 					  String input from the console to answer if the user wants to run the program again,
 *   					if "yes" or "y", the program will start again, any other input will end the program
 *			Output(s): The program will output the permutations to the console.
 *					   A file called "Permutations.txt" will be created in the same directory as Permutation.java
 *						and will output the permutations.  
 */
import java.io.*;
import java.util.*;
public class Permutation{
  private static Scanner scan;
  public static void main(String args[]) {
	  String answer = "yes";
	  final int MAXLENGTH = 7;
	  
	  /*Purpose of while loop:
	   * The program will continue to run as long as the user answers "yes" or "y" when 
	   * 	prompted "Would you like to permute another string?". When the while loop breaks,
	   * 	the program is terminated 
	   */
	  
	  while(answer.equals("yes") || answer.equals("y")){
		  Permuter permuter1 = new Permuter();
		  System.out.print("String to Permute: ");
		  String userInput = cleanString(getInput());
		  
		  /*Checks if userInput length is >= MAXLENGTH; if true, continues to the next iteration of the while loop*/
		  if (userInput.length() >= MAXLENGTH){
			  System.out.println("To avoid a possible StackOverFlow, please restrict the size of the string less than " + MAXLENGTH);
			  continue;//prompts the user to enter a different string 
		  }//end if
		  //System.out.println(userInput);//debug 
		  
		  /*Stores the permutations generated by the permuter in ArrayList permutation
		   * "permuter1.perm(userInput)" generates the permutations 
		   * **SEE COMMENTS IN Permuter.java FOR DETAILS ON HOW PERMUTATIONS WERE GENERATED */
		  ArrayList<String> permutation = permuter1.perm(userInput);
		  printList(permutation);
		  toTextFile(permutation);//Permutations.txt is created, if Permutations.txt already exists, it's overwritten
		 
		  /*Prompts the user to either continue running the program or exit the program */
		  System.out.println("\nWould you like to permute another string?"); 
		  answer = cleanString(getInput());
	  }//end while; will continue if answer is "yes" or "y"
  }//end method
  
  
  /* getInput:
   * 	Purpose: Scans the console for user input and returns the input as a string
   * 	
   * 	Precondition: This is the first method called in main
   * 	Postcondition: Returns String userInput
   */
  public static String getInput(){
		scan = new Scanner(System.in);
		String userInput = scan.nextLine();
		return userInput;
  }//end getInput
  
  /* cleanString:
   *  	Purpose: Uses functions from the JAVA String class to trim the whitespace between the string characters     
   * 		and to assure that all strings are uniform lowercase.
   * 	
   * 	Precondition: getInput needs to return user input
   * 	Postcondition: Returns String s; String s will be lowercase and whitespace will be trimmed 
   */
  public static String cleanString(String s){
  		return s.toLowerCase().trim();
	}//end cleanString
  
  /* printList:
   * 	Purpose: Prints the elements in an ArrayList<String> to the console. 
   * 	
   * 	Precondition: The Permuter instance must return an ArrayList containing the permutations
   * 	Postcondition: The permutations are printed on the console
   */
  public static void printList(ArrayList<String> s){
	  for(int i = 0; i < s.size(); i++){
		  System.out.println(s.get(i));
	  }//end for
  }//end printList
  
  /* toTextFile:
   * 	Purpose: Creates a text field called "Permutations.txt" that contains a list of all the generated
   * 		permutations. The location of Permustations.txt is in the same directory as Permutation.java
   * 
   * 	Precondition: The Permuter instance must return an ArrayList containing the permutations
   * 	Postcondition: A text file "Permutations.txt" is created containing a list of the generated permutations
   */
  public static void toTextFile(ArrayList<String> s){
	  try{
		/*creates a text file called "Permutations.txt" in the same directory as Permutation.java*/
		  PrintWriter output = new PrintWriter(
				  new FileWriter("Permutations.txt")); 
		  for(int i = 0; i < s.size(); i++){
			  output.println(s.get(i));
		  }//end for
		  output.close(); //closes the FileWriter stream
	  }//end try
	  /*If creating Permutations.txt fails, the program will print out the exception and terminate */
	  catch(IOException e){
		  System.out.println(e);
		  System.exit(1);
	  }//end catch
  }//end toTextFile
}//end Permutation class
